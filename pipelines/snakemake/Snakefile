import glob

configfile: "config.yaml"

rule all:
    input:
        f"{config['output_dir']}/consensus_comparison.out",
        f"{config['output_dir']}/bcfs_comparison.out",
        f"{config['output_dir']}/mykrobe_comparison.out",
        f"{config['output_dir']}/mykrobe_comparison.simple.out",

def get_input(wildcards):
    reads = glob.glob(f"{config['base_reads_dir']}/{wildcards.sample}.nanopore.fq.gz")
    assert len(reads) == 1
    return reads

rule run_tbpore:
    input:
        get_input
    output:
        directory(f"{config['output_dir']}/{{sample}}")
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: 10000 * attempt
    log:
        "logs/run_tbpore_{sample}.log"
    shell:
        "tbpore --no-cleanup -o {output} {input}"


rule compare_h2h_and_tbpore_consensus:
    input:
        all_tbpore_outputs = expand(f"{config['output_dir']}/{{sample}}", sample=config['samples'])
    output:
        consensus_comparison = f"{config['output_dir']}/consensus_comparison.out"
    params:
        tbpore_output = config['output_dir'],
        h2h_consensus_glob_pattern = config['h2h_consensus_glob_pattern'],
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: 1000 * attempt
    log:
        "logs/compare_h2h_and_tbpore_consensus.log"
    script: "scripts/compare_H2H_and_tbpore_consensus.py"


rule compare_h2h_and_tbpore_bcfs:
    input:
        all_tbpore_outputs = expand(f"{config['output_dir']}/{{sample}}", sample=config['samples'])
    output:
        bcfs_comparison = f"{config['output_dir']}/bcfs_comparison.out"
    params:
        tbpore_output = config['output_dir'],
        h2h_bcf_glob_pattern = config['h2h_bcf_glob_pattern'],
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: 1000 * attempt
    log:
        "logs/compare_h2h_and_tbpore_bcfs.log"
    script: "scripts/compare_h2h_and_tbpore_bcfs.py"


rule compare_h2h_and_tbpore_mykrobe:
    input:
        all_tbpore_outputs = expand(f"{config['output_dir']}/{{sample}}", sample=config['samples'])
    output:
        mykrobe_comparison = f"{config['output_dir']}/mykrobe_comparison.out",
        mykrobe_comparison_simple = f"{config['output_dir']}/mykrobe_comparison.simple.out"
    params:
        tbpore_output = config['output_dir'],
        h2h_mykrobe_glob_pattern = config['h2h_mykrobe_glob_pattern'],
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: 1000 * attempt
    log:
        "logs/compare_h2h_and_tbpore_mykrobe.log"
    run:
        import json
        import dictdiffer
        from pathlib import Path
        from glob import glob

        def get_samples(glob_pattern):
            mykrobe_files = (Path(file).resolve() for file in glob(glob_pattern))
            return {file.name.replace(".mykrobe.json", ""): file for file in mykrobe_files}

        def cleanup_susceptiblity_dict(dict):
            for drug in dict:
                if "called_by" in dict[drug]:
                    del dict[drug]["called_by"]
            for drug in dict:
                assert "called_by" not in dict[drug]

        def compare(h2h_mykrobe_glob_pattern, tbpore_glob_pattern, output_fh, output_simple_fh):
            h2h_samples = get_samples(h2h_mykrobe_glob_pattern)
            tbpore_samples = get_samples(tbpore_glob_pattern)
            common_samples = set(h2h_samples.keys()).intersection(set(tbpore_samples.keys()))
            for sample in common_samples:
                h2h_mykrobe = h2h_samples[sample]
                tbpore_mykrobe = tbpore_samples[sample]

                with open(h2h_mykrobe) as h2h_mykrobe_fh, open(tbpore_mykrobe) as tbpore_mykrobe_fh:
                    h2h_mykrobe_json = json.load(h2h_mykrobe_fh)
                    tbpore_mykrobe_json = json.load(tbpore_mykrobe_fh)

                print(f"Diffing mykrobe jsons for {sample}", file=output_fh)
                h2h_susceptibility = h2h_mykrobe_json[sample]["susceptibility"]
                tbpore_susceptibility = tbpore_mykrobe_json[sample]["susceptibility"]
                for diff in list(dictdiffer.diff(h2h_susceptibility, tbpore_susceptibility)):
                    print(diff, file=output_fh)

                print(f"Diffing mykrobe jsons for {sample}", file=output_simple_fh)
                cleanup_susceptiblity_dict(h2h_susceptibility)
                cleanup_susceptiblity_dict(tbpore_susceptibility)
                for diff in list(dictdiffer.diff(h2h_susceptibility, tbpore_susceptibility)):
                    print(diff, file=output_simple_fh)


        with open(output.mykrobe_comparison, "w") as output_fh, open(output.mykrobe_comparison_simple, "w") as output_simple_fh:
            compare(h2h_mykrobe_glob_pattern=params.h2h_mykrobe_glob_pattern,
                    tbpore_glob_pattern=f"{params.tbpore_output}/*/*.mykrobe.json",
                    output_fh=output_fh, output_simple_fh=output_simple_fh)
